# Generated by Django 5.1.6 on 2025-04-19 17:41

import blowcomotion.blocks
import django.db.models.deletion
import modelcluster.fields
import taggit.managers
import wagtail.fields
import wagtail.images.models
import wagtail.models.media
import wagtail.search.index
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    replaces = [
        ("blowcomotion", "0001_initial"),
        ("blowcomotion", "0002_customimage_description_sitesettings"),
        ("blowcomotion", "0003_alter_sitesettings_facebook"),
        ("blowcomotion", "0004_remove_blankcanvaspage_body"),
        ("blowcomotion", "0005_blankcanvaspage_body"),
        ("blowcomotion", "0006_event"),
        ("blowcomotion", "0007_instrument_member_section_instrument_section"),
        ("blowcomotion", "0008_section_members"),
        ("blowcomotion", "0009_alter_instrument_section"),
        (
            "blowcomotion",
            "0010_alter_member_instruments_alter_section_instructors_and_more",
        ),
        ("blowcomotion", "0011_instrument_sort_order"),
        ("blowcomotion", "0012_remove_member_instruments_delete_instrument"),
        ("blowcomotion", "0013_instrument"),
        ("blowcomotion", "0014_remove_instrument_member_and_more"),
        ("blowcomotion", "0015_sectioninstructor_sectionmember"),
        (
            "blowcomotion",
            "0016_remove_section_instructors_remove_section_members_and_more",
        ),
        ("blowcomotion", "0017_alter_sectioninstructor_options_and_more"),
        ("blowcomotion", "0018_rename_member_sectioninstructor_instructor"),
        ("blowcomotion", "0019_member_instruments_delete_memberinstrument"),
        ("blowcomotion", "0020_remove_member_instruments_memberinstrument"),
        ("blowcomotion", "0021_song_chart"),
        ("blowcomotion", "0022_alter_song_arranger_alter_song_composer_and_more"),
        ("blowcomotion", "0023_remove_song_conductors_songconductor"),
        ("blowcomotion", "0024_remove_song_event_eventsetlist"),
        ("blowcomotion", "0025_chart_part"),
        ("blowcomotion", "0026_alter_chart_part"),
        (
            "blowcomotion",
            "0027_rename_eventsetlist_eventsetlistsong_event_time_and_more",
        ),
        ("blowcomotion", "0028_alter_blankcanvaspage_body"),
        ("blowcomotion", "0029_event_event_scroller_image_and_more"),
        ("blowcomotion", "0030_alter_event_event_scroller_image"),
        ("blowcomotion", "0031_alter_blankcanvaspage_body"),
        ("blowcomotion", "0032_alter_blankcanvaspage_body"),
        ("blowcomotion", "0033_sitesettings_header_menus_alter_blankcanvaspage_body"),
        ("blowcomotion", "0034_alter_sitesettings_header_menus"),
        ("blowcomotion", "0035_alter_blankcanvaspage_body"),
        ("blowcomotion", "0036_alter_blankcanvaspage_body"),
        ("blowcomotion", "0037_alter_blankcanvaspage_body"),
        ("blowcomotion", "0038_alter_blankcanvaspage_body"),
        ("blowcomotion", "0039_sitesettings_email_sitesettings_footer_text_and_more"),
        ("blowcomotion", "0040_alter_blankcanvaspage_body"),
        ("blowcomotion", "0041_alter_blankcanvaspage_body"),
        ("blowcomotion", "0042_alter_blankcanvaspage_body"),
        ("blowcomotion", "0043_alter_blankcanvaspage_body"),
        ("blowcomotion", "0044_alter_blankcanvaspage_body"),
        ("blowcomotion", "0045_alter_blankcanvaspage_body"),
        ("blowcomotion", "0046_wikiindexpage_wikipage"),
        ("blowcomotion", "0047_wikiauthor"),
        ("blowcomotion", "0048_alter_blankcanvaspage_body"),
    ]

    initial = True

    dependencies = [
        ("taggit", "0005_auto_20220424_2025"),
        ("wagtailcore", "0089_log_entry_data_json_null_to_object"),
        ("wagtailcore", "0094_alter_page_locale"),
        ("wagtaildocs", "0014_alter_document_file_size"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="CustomImage",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=255, verbose_name="title")),
                (
                    "file",
                    wagtail.images.models.WagtailImageField(
                        height_field="height",
                        upload_to=wagtail.images.models.get_upload_to,
                        verbose_name="file",
                        width_field="width",
                    ),
                ),
                ("width", models.IntegerField(editable=False, verbose_name="width")),
                ("height", models.IntegerField(editable=False, verbose_name="height")),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True, db_index=True, verbose_name="created at"
                    ),
                ),
                ("focal_point_x", models.PositiveIntegerField(blank=True, null=True)),
                ("focal_point_y", models.PositiveIntegerField(blank=True, null=True)),
                (
                    "focal_point_width",
                    models.PositiveIntegerField(blank=True, null=True),
                ),
                (
                    "focal_point_height",
                    models.PositiveIntegerField(blank=True, null=True),
                ),
                ("file_size", models.PositiveIntegerField(editable=False, null=True)),
                (
                    "file_hash",
                    models.CharField(
                        blank=True, db_index=True, editable=False, max_length=40
                    ),
                ),
                ("caption", models.CharField(blank=True, max_length=255)),
                (
                    "collection",
                    models.ForeignKey(
                        default=wagtail.models.media.get_root_collection_id,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="+",
                        to="wagtailcore.collection",
                        verbose_name="collection",
                    ),
                ),
                (
                    "tags",
                    taggit.managers.TaggableManager(
                        blank=True,
                        help_text=None,
                        through="taggit.TaggedItem",
                        to="taggit.Tag",
                        verbose_name="tags",
                    ),
                ),
                (
                    "uploaded_by_user",
                    models.ForeignKey(
                        blank=True,
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="uploaded by user",
                    ),
                ),
                (
                    "description",
                    models.CharField(
                        blank=True,
                        default="",
                        max_length=255,
                        verbose_name="description",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=(
                wagtail.images.models.ImageFileMixin,
                wagtail.search.index.Indexed,
                models.Model,
            ),
        ),
        migrations.CreateModel(
            name="CustomRendition",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("filter_spec", models.CharField(db_index=True, max_length=255)),
                (
                    "file",
                    wagtail.images.models.WagtailImageField(
                        height_field="height",
                        storage=wagtail.images.models.get_rendition_storage,
                        upload_to=wagtail.images.models.get_rendition_upload_to,
                        width_field="width",
                    ),
                ),
                ("width", models.IntegerField(editable=False)),
                ("height", models.IntegerField(editable=False)),
                (
                    "focal_point_key",
                    models.CharField(
                        blank=True, default="", editable=False, max_length=16
                    ),
                ),
                (
                    "image",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="renditions",
                        to="blowcomotion.customimage",
                    ),
                ),
            ],
            options={
                "unique_together": {("image", "filter_spec", "focal_point_key")},
            },
            bases=(wagtail.images.models.ImageFileMixin, models.Model),
        ),
        migrations.CreateModel(
            name="SiteSettings",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("facebook", models.URLField(blank=True, null=True)),
                (
                    "logo",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="blowcomotion.customimage",
                    ),
                ),
                (
                    "site",
                    models.OneToOneField(
                        editable=False,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="wagtailcore.site",
                    ),
                ),
                (
                    "header_menus",
                    wagtail.fields.StreamField(
                        [("menu_item", 3)],
                        blank=True,
                        block_lookup={
                            0: ("wagtail.blocks.PageChooserBlock", (), {}),
                            1: ("wagtail.blocks.CharBlock", (), {"required": False}),
                            2: (
                                "wagtail.blocks.ListBlock",
                                (blowcomotion.blocks.MenuItemBlock,),
                                {"collapsed": True, "required": False},
                            ),
                            3: (
                                "wagtail.blocks.StructBlock",
                                [[("page", 0), ("label", 1), ("submenus", 2)]],
                                {},
                            ),
                        },
                        null=True,
                    ),
                ),
                ("email", models.EmailField(blank=True, max_length=254, null=True)),
                (
                    "footer_text",
                    models.CharField(
                        blank=True,
                        help_text="Text to display in the footer",
                        max_length=255,
                        null=True,
                    ),
                ),
                ("instagram", models.URLField(blank=True, null=True)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="BlankCanvasPage",
            fields=[
                (
                    "page_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="wagtailcore.page",
                    ),
                ),
                (
                    "body",
                    wagtail.fields.StreamField(
                        [
                            ("column_layout", 10),
                            ("countdown", 18),
                            ("events", 25),
                            ("full_width_image", 27),
                            ("hero", 30),
                            ("horizontal_rule", 4),
                            ("multi_image_banner", 32),
                            ("quoted_image", 34),
                            ("rich_text", 2),
                            ("spacer", 5),
                            ("upcoming_events", 36),
                        ],
                        blank=True,
                        block_lookup={
                            0: ("wagtail.blocks.RichTextBlock", (), {}),
                            1: (
                                "wagtail.blocks.ChoiceBlock",
                                [],
                                {
                                    "choices": [
                                        ("left", "Left"),
                                        ("center", "Center"),
                                        ("right", "Right"),
                                    ]
                                },
                            ),
                            2: (
                                "wagtail.blocks.StructBlock",
                                [[("rich_text", 0), ("align", 1)]],
                                {},
                            ),
                            3: (
                                "wagtail.images.blocks.ImageChooserBlock",
                                (),
                                {"template": "blocks/image_block.html"},
                            ),
                            4: ("blowcomotion.blocks.HorizontalRuleBlock", (), {}),
                            5: ("blowcomotion.blocks.SpacerBlock", (), {}),
                            6: (
                                "wagtail.blocks.StreamBlock",
                                [
                                    [
                                        ("rich_text", 2),
                                        ("image", 3),
                                        ("horizontal_rule", 4),
                                        ("spacer", 5),
                                    ]
                                ],
                                {"required": False},
                            ),
                            7: (
                                "wagtail.blocks.StructBlock",
                                [[("left_column", 6), ("right_column", 6)]],
                                {},
                            ),
                            8: (
                                "wagtail.blocks.StructBlock",
                                [
                                    [
                                        ("left_column", 6),
                                        ("middle_column", 6),
                                        ("right_column", 6),
                                    ]
                                ],
                                {},
                            ),
                            9: (
                                "wagtail.blocks.StructBlock",
                                [
                                    [
                                        ("left_column", 6),
                                        ("middle_column", 6),
                                        ("right_column", 6),
                                        ("middle_left_column", 6),
                                        ("middle_right_column", 6),
                                    ]
                                ],
                                {},
                            ),
                            10: (
                                "wagtail.blocks.StreamBlock",
                                [
                                    [
                                        ("two_column", 7),
                                        ("three_column", 8),
                                        ("four_column", 9),
                                    ]
                                ],
                                {},
                            ),
                            11: (
                                "wagtail.images.blocks.ImageChooserBlock",
                                (),
                                {"required": False},
                            ),
                            12: (
                                "wagtail.blocks.DateBlock",
                                (),
                                {"help_text": "Enter the date for the countdown."},
                            ),
                            13: (
                                "wagtail.blocks.CharBlock",
                                (),
                                {
                                    "help_text": "Enter the top line text for the countdown.",
                                    "required": False,
                                },
                            ),
                            14: (
                                "wagtail.blocks.CharBlock",
                                (),
                                {
                                    "help_text": "Enter the sub line text for the countdown.",
                                    "required": False,
                                },
                            ),
                            15: (
                                "wagtail.blocks.CharBlock",
                                (),
                                {
                                    "help_text": "Enter the text for the button.",
                                    "required": False,
                                },
                            ),
                            16: (
                                "wagtail.blocks.URLBlock",
                                (),
                                {
                                    "help_text": "Enter the URL for the button.",
                                    "required": False,
                                },
                            ),
                            17: (
                                "wagtail.blocks.ChoiceBlock",
                                [],
                                {
                                    "choices": [
                                        ("_self", "Same Tab"),
                                        ("_blank", "New Tab"),
                                    ],
                                    "help_text": "Select the target for the button.",
                                },
                            ),
                            18: (
                                "wagtail.blocks.StructBlock",
                                [
                                    [
                                        ("background_image", 11),
                                        ("countdown_date", 12),
                                        ("head_line", 13),
                                        ("sub_line", 14),
                                        ("button_text", 15),
                                        ("button_url", 16),
                                        ("button_target", 17),
                                    ]
                                ],
                                {},
                            ),
                            19: ("wagtail.blocks.CharBlock", (), {}),
                            20: (
                                "blowcomotion.chooser_blocks.GigoGigChooserBlock",
                                (),
                                {},
                            ),
                            21: (
                                "wagtail.blocks.StructBlock",
                                [[("details", 20), ("event_scroller_image", 11)]],
                                {},
                            ),
                            22: ("wagtail.blocks.ListBlock", (21,), {}),
                            23: (
                                "blowcomotion.chooser_blocks.EventChooserBlock",
                                (),
                                {},
                            ),
                            24: (
                                "wagtail.blocks.ListBlock",
                                (23,),
                                {
                                    "help_text": "Events that are not associated with Gig-o-Matic"
                                },
                            ),
                            25: (
                                "wagtail.blocks.StructBlock",
                                [
                                    [
                                        ("scroller_title", 19),
                                        ("gigo_gigs", 22),
                                        ("events", 24),
                                    ]
                                ],
                                {},
                            ),
                            26: ("wagtail.images.blocks.ImageChooserBlock", (), {}),
                            27: ("wagtail.blocks.StructBlock", [[("image", 26)]], {}),
                            28: ("wagtail.blocks.CharBlock", (), {"required": False}),
                            29: ("wagtail.blocks.URLBlock", (), {"required": False}),
                            30: (
                                "wagtail.blocks.StructBlock",
                                [
                                    [
                                        ("image", 26),
                                        ("top_line", 28),
                                        ("middle_line", 28),
                                        ("bottom_line", 28),
                                        ("youtube_url", 29),
                                    ]
                                ],
                                {},
                            ),
                            31: (
                                "wagtail.blocks.ListBlock",
                                (26,),
                                {
                                    "help_text": "Select images to display in the banner.",
                                    "max_num": 7,
                                    "min_num": 7,
                                },
                            ),
                            32: ("wagtail.blocks.StructBlock", [[("images", 31)]], {}),
                            33: ("wagtail.blocks.TextBlock", (), {"required": False}),
                            34: (
                                "wagtail.blocks.StructBlock",
                                [
                                    [
                                        ("image", 26),
                                        ("header", 28),
                                        ("subheader", 33),
                                        ("author", 28),
                                    ]
                                ],
                                {},
                            ),
                            35: (
                                "wagtail.blocks.CharBlock",
                                (),
                                {
                                    "help_text": "Enter the headline for the upcoming public gigs.",
                                    "required": False,
                                },
                            ),
                            36: (
                                "wagtail.blocks.StructBlock",
                                [[("headline", 35)]],
                                {},
                            ),
                        },
                        null=True,
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=("wagtailcore.page",),
        ),
        migrations.CreateModel(
            name="Event",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=255)),
                ("date", models.DateField(blank=True, null=True)),
                (
                    "location",
                    models.CharField(
                        blank=True,
                        help_text="e.g. 'Mueller Lake Park, Austin, TX'",
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "location_url",
                    models.URLField(
                        blank=True, help_text="URL for a map of the location", null=True
                    ),
                ),
                ("description", models.TextField(blank=True, null=True)),
                ("time", models.TimeField(blank=True, null=True)),
                (
                    "event_scroller_image",
                    models.ForeignKey(
                        blank=True,
                        help_text="Image to be used in the event scroller component",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="blowcomotion.customimage",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Member",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("first_name", models.CharField(max_length=255)),
                ("last_name", models.CharField(max_length=255)),
                ("birthday", models.DateField(blank=True, null=True)),
                ("join_date", models.DateField(blank=True, null=True)),
                ("is_active", models.BooleanField(default=True)),
                ("bio", models.TextField(blank=True, null=True)),
                ("instructor", models.BooleanField(default=False)),
                ("board_member", models.BooleanField(default=False)),
                (
                    "image",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="blowcomotion.customimage",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Section",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255)),
            ],
            options={
                "verbose_name": "Section",
                "verbose_name_plural": "Sections",
            },
        ),
        migrations.CreateModel(
            name="Instrument",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                ("description", models.TextField(blank=True, null=True)),
                (
                    "image",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="blowcomotion.customimage",
                    ),
                ),
                (
                    "section",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="blowcomotion.section",
                    ),
                ),
            ],
            options={
                "verbose_name": "Instrument",
                "verbose_name_plural": "Instruments",
            },
        ),
        migrations.CreateModel(
            name="SectionMember",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "member",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="blowcomotion.member",
                    ),
                ),
                (
                    "section",
                    modelcluster.fields.ParentalKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="members",
                        to="blowcomotion.section",
                    ),
                ),
                (
                    "sort_order",
                    models.IntegerField(blank=True, editable=False, null=True),
                ),
            ],
            options={
                "ordering": ["sort_order"],
            },
        ),
        migrations.CreateModel(
            name="SectionInstructor",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "instructor",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="blowcomotion.member",
                    ),
                ),
                (
                    "section",
                    modelcluster.fields.ParentalKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="instructors",
                        to="blowcomotion.section",
                    ),
                ),
                (
                    "sort_order",
                    models.IntegerField(blank=True, editable=False, null=True),
                ),
            ],
            options={
                "ordering": ["sort_order"],
            },
        ),
        migrations.CreateModel(
            name="MemberInstrument",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "sort_order",
                    models.IntegerField(blank=True, editable=False, null=True),
                ),
                (
                    "instrument",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="blowcomotion.instrument",
                    ),
                ),
                (
                    "member",
                    modelcluster.fields.ParentalKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="instruments",
                        to="blowcomotion.member",
                    ),
                ),
            ],
            options={
                "ordering": ["sort_order"],
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Song",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=255)),
                (
                    "time_signature",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    "key_signature",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("style", models.CharField(blank=True, max_length=255, null=True)),
                ("composer", models.CharField(blank=True, max_length=255, null=True)),
                ("arranger", models.CharField(blank=True, max_length=255, null=True)),
                ("description", models.TextField(blank=True, null=True)),
                ("music_video_url", models.URLField(blank=True, null=True)),
            ],
            options={
                "abstract": False,
            },
            bases=(models.Model, wagtail.search.index.Indexed),
        ),
        migrations.CreateModel(
            name="SongConductor",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "sort_order",
                    models.IntegerField(blank=True, editable=False, null=True),
                ),
                (
                    "member",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="blowcomotion.member",
                    ),
                ),
                (
                    "song",
                    modelcluster.fields.ParentalKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="conductors",
                        to="blowcomotion.song",
                    ),
                ),
            ],
            options={
                "ordering": ["sort_order"],
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Chart",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("is_part_uploaded", models.BooleanField(default=False)),
                (
                    "instrument",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="blowcomotion.instrument",
                    ),
                ),
                (
                    "pdf",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="wagtaildocs.document",
                    ),
                ),
                (
                    "song",
                    modelcluster.fields.ParentalKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="charts",
                        to="blowcomotion.song",
                    ),
                ),
                (
                    "part",
                    models.CharField(
                        blank=True,
                        help_text=" e.g. '2nd Trombone' If left blank, instrument name will be used.",
                        max_length=255,
                        null=True,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="EventSetlistSong",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "sort_order",
                    models.IntegerField(blank=True, editable=False, null=True),
                ),
                (
                    "event",
                    modelcluster.fields.ParentalKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="setlist",
                        to="blowcomotion.event",
                    ),
                ),
                (
                    "song",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="blowcomotion.song",
                    ),
                ),
            ],
            options={
                "ordering": ["sort_order"],
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="WikiIndexPage",
            fields=[
                (
                    "blankcanvaspage_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="blowcomotion.blankcanvaspage",
                    ),
                ),
            ],
            options={
                "verbose_name": "Wiki Index Page",
                "verbose_name_plural": "Wiki Index Pages",
            },
            bases=("blowcomotion.blankcanvaspage",),
        ),
        migrations.CreateModel(
            name="WikiPage",
            fields=[
                (
                    "blankcanvaspage_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="blowcomotion.blankcanvaspage",
                    ),
                ),
            ],
            options={
                "verbose_name": "Wiki Page",
                "verbose_name_plural": "Wiki Pages",
            },
            bases=("blowcomotion.blankcanvaspage",),
        ),
        migrations.CreateModel(
            name="WikiAuthor",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "sort_order",
                    models.IntegerField(blank=True, editable=False, null=True),
                ),
                (
                    "author",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="blowcomotion.member",
                    ),
                ),
                (
                    "page",
                    modelcluster.fields.ParentalKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="authors",
                        to="blowcomotion.wikipage",
                    ),
                ),
            ],
            options={
                "ordering": ["sort_order"],
                "abstract": False,
            },
        ),
    ]
