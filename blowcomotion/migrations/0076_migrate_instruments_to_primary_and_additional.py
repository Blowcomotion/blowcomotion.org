# Generated by Django 5.1.6 on 2025-10-08 01:02

from django.db import migrations


def migrate_instruments_to_primary(apps, schema_editor):
    """
    Migrate existing instrument data to the new primary_instrument field.
    The first instrument in the MemberInstrument relationship becomes the primary instrument.
    The primary instrument is then removed from the additional instruments list.
    """
    Member = apps.get_model('blowcomotion', 'Member')
    MemberInstrument = apps.get_model('blowcomotion', 'MemberInstrument')
    
    # Get all members with instruments
    members_with_instruments = Member.objects.filter(
        additional_instruments__isnull=False
    ).distinct()
    
    migrated_count = 0
    removed_count = 0
    for member in members_with_instruments:
        # Get the first instrument for this member (ordered by ID)
        first_member_instrument = member.additional_instruments.order_by('id').first()
        
        if first_member_instrument:
            # Set the first instrument as the primary instrument
            member.primary_instrument = first_member_instrument.instrument
            member.save()
            migrated_count += 1
            
            print(f"Migrated member {member.id} ({member.first_name} {member.last_name}): "
                  f"Primary instrument set to {first_member_instrument.instrument.name}")
            
            # Remove the primary instrument from additional instruments
            first_member_instrument.delete()
            removed_count += 1
            print(f"  Removed {first_member_instrument.instrument.name} from additional instruments")
    
    print(f"\nMigration complete: Set primary instrument for {migrated_count} members")
    print(f"Removed {removed_count} primary instruments from additional instruments list")


def reverse_migration(apps, schema_editor):
    """
    Reverse migration: Clear the primary_instrument field.
    The additional_instruments relationships remain unchanged.
    """
    Member = apps.get_model('blowcomotion', 'Member')
    
    members_with_primary = Member.objects.filter(primary_instrument__isnull=False)
    count = members_with_primary.count()
    
    members_with_primary.update(primary_instrument=None)
    
    print(f"Reversed migration: Cleared primary instrument for {count} members")


class Migration(migrations.Migration):

    dependencies = [
        ('blowcomotion', '0075_member_primary_instrument_and_more'),
    ]

    operations = [
        migrations.RunPython(migrate_instruments_to_primary, reverse_migration),
    ]
